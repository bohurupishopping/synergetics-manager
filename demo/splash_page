import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import '../bloc/auth/auth_bloc.dart';
import '../bloc/auth/auth_state.dart';

// --- UI Constants for a Modern, Clean Splash Design ---
class _UIConstants {
  static const Color primary = Color(0xFF007AFF);
  static const Color textPrimary = Color(0xFF1D2939);
  static const Color textSecondary = Color(0xFF667085);
  static const Color background = Color(0xFFF9FAFB);
  static const Color border = Color(0xFFEAECF0);

  static const List<String> loadingMessages = [
    'Warming up the engines...',
    'Brewing some coffee...',
    'Getting things ready for you...',
    'Polishing the pixels...',
    'Checking for updates...',
    'Almost there!',
  ];
}

class SplashPage extends StatefulWidget {
  const SplashPage({super.key});

  @override
  State<SplashPage> createState() => _SplashPageState();
}

class _SplashPageState extends State<SplashPage> with TickerProviderStateMixin {
  late final AnimationController _entryController;
  late final AnimationController _progressController;
  late final Animation<double> _fadeAnimation;
  late final Animation<double> _scaleAnimation;

  // State for cute loading messages
  late final Timer _messageTimer;
  int _currentMessageIndex = 0;

  bool _animationCompleted = false;

  @override
  void initState() {
    super.initState();

    // Controller for the main logo/title entry animation
    _entryController = AnimationController(duration: const Duration(milliseconds: 800), vsync: this);

    // Controller for the fake progress bar animation
    _progressController = AnimationController(duration: const Duration(seconds: 2), vsync: this);

    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0)
        .animate(CurvedAnimation(parent: _entryController, curve: Curves.easeIn));

    _scaleAnimation = Tween<double>(begin: 0.7, end: 1.0)
        .animate(CurvedAnimation(parent: _entryController, curve: const Interval(0.2, 1.0, curve: Curves.elasticOut)));
    
    // Timer to cycle through cute messages
    _messageTimer = Timer.periodic(const Duration(seconds: 1), (timer) {
      if (mounted) {
        setState(() {
          _currentMessageIndex = (_currentMessageIndex + 1) % _UIConstants.loadingMessages.length;
        });
      }
    });

    // Start all animations
    _entryController.forward();
    _progressController.forward();
    
    // Set a minimum splash time and then check for navigation
    Future.delayed(const Duration(milliseconds: 500), () { // Reduced minimum delay
      if (mounted) {
        _animationCompleted = true;
        _navigateAfterSplash();
      }
    });
  }

  void _navigateAfterSplash() {
    if (!mounted || !_animationCompleted) return;

    final authState = context.read<AuthBloc>().state;
    _handleAuthNavigation(authState);
  }

  void _handleAuthNavigation(AuthState state) {
    if (!mounted || !_animationCompleted) return;
    
    String? route;
    if (state is AuthAuthenticated) route = '/dashboard';
    if (state is AuthUnauthenticated || state is AuthError || state is AuthAccessDenied) route = '/login';

    if (route != null) {
      context.go(route);
    }
  }

  @override
  void dispose() {
    _entryController.dispose();
    _progressController.dispose();
    _messageTimer.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<AuthBloc, AuthState>(
      listener: (context, state) {
        // Listen for the first non-loading auth state to navigate
        if (state is! AuthInitial && state is! AuthLoading) {
          _handleAuthNavigation(state);
        }
      },
      child: Scaffold(
        backgroundColor: _UIConstants.background,
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Spacer(),
              _buildLogoAndTitle(),
              const Spacer(),
              _buildLoadingIndicator(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildLogoAndTitle() {
    return ScaleTransition(
      scale: _scaleAnimation,
      child: FadeTransition(
        opacity: _fadeAnimation,
        child: Column(
          children: [
            Container(
              width: 120,
              height: 120,
              decoration: ShapeDecoration(
                color: _UIConstants.primary.withAlpha(26), // Light blue background
                shape: const ContinuousRectangleBorder(
                  borderRadius: BorderRadius.all(Radius.circular(40)),
                ),
              ),
              child: const Center(
                child: Icon(
                  Icons.inventory_2_outlined,
                  size: 60,
                  color: _UIConstants.primary,
                ),
              ),
            ),
            const SizedBox(height: 24),
            const Text(
              'StockMap Admin',
              style: TextStyle(
                fontSize: 32,
                fontWeight: FontWeight.bold,
                color: _UIConstants.textPrimary,
              ),
            ),
            const SizedBox(height: 8),
            const Text(
              'Smart Inventory Management',
              style: TextStyle(
                fontSize: 16,
                color: _UIConstants.textSecondary,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildLoadingIndicator() {
    return FadeTransition(
      opacity: _fadeAnimation,
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 40, vertical: 40),
        child: Column(
          children: [
            AnimatedSwitcher(
              duration: const Duration(milliseconds: 500),
              transitionBuilder: (child, animation) {
                return FadeTransition(
                  opacity: animation,
                  child: SlideTransition(
                    position: Tween<Offset>(begin: const Offset(0, 0.5), end: Offset.zero).animate(animation),
                    child: child,
                  ),
                );
              },
              child: Text(
                _UIConstants.loadingMessages[_currentMessageIndex],
                key: ValueKey<int>(_currentMessageIndex), // Important for AnimatedSwitcher
                style: const TextStyle(
                  fontSize: 14,
                  fontWeight: FontWeight.w500,
                  color: _UIConstants.textSecondary,
                ),
              ),
            ),
            const SizedBox(height: 16),
            AnimatedBuilder(
              animation: _progressController,
              builder: (context, child) {
                return Container(
                  height: 6,
                  clipBehavior: Clip.antiAlias,
                  decoration: BoxDecoration(
                    color: _UIConstants.border,
                    borderRadius: BorderRadius.circular(10),
                  ),
                  child: LinearProgressIndicator(
                    value: _progressController.value,
                    backgroundColor: Colors.transparent,
                    color: _UIConstants.primary,
                  ),
                );
              },
            ),
          ],
        ),
      ),
    );
  }
}
